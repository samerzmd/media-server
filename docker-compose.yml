services:
  qbittorrent:
    image: ghcr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - "8080:8080"  # Web UI
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
      - WEBUI_PORT=8080
    volumes:
      - /mnt/storage/qbittorrent:/downloads
      - ./qbittorrent_config:/config
    networks:
      - media_network

  sonarr:
    image: ghcr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    ports:
      - "8989:8989"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media/TV Shows:/media/tv
      - /mnt/storage/qbittorrent:/downloads
      - ./sonarr_config:/config
    networks:
      - media_network

  radarr:
    image: ghcr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    ports:
      - "7878:7878"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media/Movies:/media/movies
      - /mnt/storage/qbittorrent:/downloads
      - ./radarr_config:/config
    networks:
      - media_network

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    ports:
      - "9696:9696"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/qbittorrent:/downloads
      - ./prowlarr_config:/config
    networks:
      - media_network

  bazarr:
    image: ghcr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    ports:
      - "6767:6767"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media/Movies:/media/movies
      - /mnt/storage/media/TV Shows:/media/tv
      - /mnt/storage/media:/media
      - /mnt/storage/qbittorrent:/downloads
      - ./bazarr_config:/config
    networks:
      - media_network

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "8096:8096"  # HTTP Web UI
      - "8920:8920"  # HTTPS Web UI (optional)
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media:/media
      - ./jellyfin_config:/config
      - ./jellyfin_cache:/cache
    networks:
      - media_network

  nginx_proxy_manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx_proxy_manager
    restart: unless-stopped
    ports:
      - "80:80"    # HTTP
      - "81:81"    # Admin UI
      - "443:443"  # HTTPS
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - ./nginx_data:/data
      - ./nginx_letsencrypt:/etc/letsencrypt
    networks:
      - media_network

  readarr:
    image: ghcr.io/linuxserver/readarr:develop
    container_name: readarr
    restart: unless-stopped
    ports:
      - "8787:8787"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media/Books:/media/books
      - /mnt/storage/qbittorrent:/downloads
      - ./readarr_config:/config
    networks:
      - media_network
  
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage/media/Books:/books
      - ./calibre-web_config:/config
    networks:
      - media_network


  commandarr:
    image: samerzmd/commandarr:latest
    container_name: commandarr
    environment:
      TELEGRAM_TOKEN: $BOT_TOKEN
      SONARR_URL: sonarr
      SONARR_API_KEY: $SONARR_API_KEY
      RADARR_URL: radarr
      RADARR_API_KEY: $RADARR_API_KEY

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Riyadh
    volumes:
      - /mnt/storage:/srv
      - ./filebrowser_config:/config
      - ./filebrowser_database:/database
    networks:
      - media_network
  
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release-release
    volumes:
      - /mnt/storage/immich/library:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '2283:2283'
    depends_on:
      - immich_redis
      - immich_postgres
    restart: always
    healthcheck:
      disable: false
    networks:
      - media_network

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release-release
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false
    networks:
      - media_network

  immich_redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:42cba146593a5ea9a622002c1b7cba5da7be248650cbb64ecb9c6c33d29794b1
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always
    networks:
      - media_network

  immich_postgres:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    environment:
      POSTGRES_PASSWORD: samer9lifes
      POSTGRES_USER: samerzmd
      POSTGRES_DB: immich
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - /mnt/storage/immich_postgres:/var/lib/postgresql/data
    healthcheck:
      test: >-
        pg_isready --dbname="immich" --username="samerzmd" || exit 1; Chksum="$$(psql --dbname="immich" --username="samerzmd" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="samerzmd", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: always
    networks:
      - media_network

networks:
  media_network:
    driver: bridge

volumes:
  model-cache: